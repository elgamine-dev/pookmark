{"version":3,"sources":["Marks.js","Share.js","App.js","serviceWorker.js","index.js"],"names":["Mark","text","link","ts","created_at","Feed","Event","Content","Summary","href","Date","CreationDate","toLocaleDateString","setCache","marks","window","localStorage","setItem","JSON","stringify","getCache","str","getItem","parse","Marks","db","useState","loaded","share","currentPage","state","setState","useEffect","collection","get","then","querySnapshot","forEach","doc","push","data","sortedMarks","map","a","seconds","sort","b","mark","key","Loader","active","END","reducer","entries","action","hidden","added","submitting","ShareForm","title","showAtStart","_link","useRef","_title","useReducer","dispatch","submit","e","preventDefault","value","add","catch","err","alert","Segment","Form","onSubmit","Field","type","defaultValue","ref","className","Button","onClick","extract","string","matches","match","console","log","check","fields","found","filter","v","length","Share","props","show","parsedUrl","URL","location","searchParams","url","config","apiKey","process","REACT_APP_API_KEY","databaseURL","REACT_APP_DB_URL","projectId","REACT_APP_PROJECT_ID","firebase","initializeApp","firestore","App","Component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.80fa10e1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport { Loader, Feed } from 'semantic-ui-react'\n\n\nfunction Marks({db}) {\n    const [state, setState] = useState({ marks : [], loaded: false, share: null, currentPage:1 })\n    const {marks, loaded}  = state;\n\n    useEffect(() => {\n        setState(state => ({...state, marks: getCache()}))\n    }, [])\n\n    useEffect(()=>{\n        db.collection(\"mookmarks\").get().then((querySnapshot) => {\n            let marks = [];\n\n           querySnapshot.forEach((doc) => {\n               marks.push(doc.data())\n           });\n           setState(state => ({...state, marks, loaded: true}))\n           setCache(marks)\n       });\n    }, [db])\n\n    const sortedMarks = marks\n        .map(a=>{ return {...a, ts: +new Date(a.created_at.seconds * 1000)}})\n        .sort((a,b)=>(b.ts-a.ts))\n        .map(mark => <Mark key={mark.ts} {...mark} />)\n\n    return <ul>\n        {!loaded && <Loader active />}\n        {<Feed>{sortedMarks}</Feed>}\n    </ul>\n}\n\n\nconst Mark = ({text, link, created_at, ts}) => (\n    <Feed.Event>\n        <Feed.Content>\n            <Feed.Summary>\n                <a href={link}>{text}</a>\n                <Feed.Date>\n                    <CreationDate ts={ts} />\n                </Feed.Date>\n            </Feed.Summary>\n        </Feed.Content>\n    </Feed.Event>\n)\n\nconst CreationDate = ({ts}) => {\n    return new Date(ts).toLocaleDateString(\"fr-FR\")\n\n}\n\nconst setCache = marks => {\n    window.localStorage.setItem('marks', JSON.stringify(marks));\n}\n\nconst getCache = () => {\n    const str =  window.localStorage.getItem('marks')\n    if (str) {\n        return JSON.parse(str)\n    }\n    return []\n}\nexport default Marks;\n","\nimport React, {useReducer, useRef, useEffect, useState} from 'react'\nimport {Segment, Form, Button} from 'semantic-ui-react'\n\nfunction Share (props) {\n    const [state, setState] = useState({added: false, show: false})\n    useEffect(() => {\n        const parsedUrl = new URL(window.location);\n\n      const title = parsedUrl.searchParams.get('title')\n      const text = parsedUrl.searchParams.get('text')\n      const url = parsedUrl.searchParams.get('url')\n    \n      if (title ||Â text || url) {\n          console.log(parsedUrl)\n          setState({title, text, url, show:true, added:false, link: check([title, text, url]) || ''})\n      }\n    }, [])\n \n    const debug  = true\n\n    const {title, text} = state\n\n    return <>\n        {debug && <ul className={\"shared-info\"}>\n                <li><span>Title:</span> {title}</li>\n                <li><span>Text:</span> {text}</li>\n                <pre>{JSON.stringify(state, null, 2)}</pre>\n            </ul>}\n        <ShareForm showAtStart={true} db={props.db} {...state} />\n    </>\n}\n\n\nconst ADDED = 'added'\nconst START = 'startSubmit'\nconst END = 'finishedSubmitting'\nconst HIDE = 'hide'\nconst SHOW = 'show'\nconst reducer = (entries, action) => {\n    if (action === HIDE) {\n        return {...entries, hidden: true}\n    }\n    if (action === SHOW) {\n        return {...entries, hidden: false}\n    }\n    if (action === ADDED) {\n        return {...entries, added: true, hidden: true}\n    }\n    if (action === START) {\n        return {...entries, submitting: true}\n    }\n    if (action === END) {\n        return {...entries, submitting: false}\n    }\n}\n\nfunction ShareForm({title, link, db, showAtStart,added}) {\n    const _link = useRef()\n    const _title = useRef()\n    const [state, dispatch] = useReducer(reducer, {added: added, submitting: false, hidden: !showAtStart})\n    \n    const submit= (e) => {\n        e.preventDefault()\n        dispatch(START)\n        const text = _title.value\n        const link = _link.value\n        const created_at = new Date()\n\n        db\n        .collection(\"mookmarks\")\n        .add({text, link, created_at})\n        .then(()=>{\n            dispatch(END)\n            dispatch(ADDED)\n        })\n        .catch((err)=>alert(err))\n    }\n\n    \n    if (state.added) {\n        return <span>â Link added successfully</span>;\n    }\n\n    if (state.submitting) {\n        return <span>Saving</span>;\n    }\n\n    if (state.hidden) {\n        return null\n    }\n\n    return (\n        <Segment>\n            <Form onSubmit={submit}>\n                <Form.Field>\n                    <input type=\"text\" defaultValue={title} ref={_title}/>\n                </Form.Field>\n                <Form.Field>\n                    <input type=\"text\" defaultValue={link} ref={_link}/>\n                </Form.Field>\n                <div className={\"shared-submit\"}><Button onClick={submit}>Add</Button></div>\n            </Form>\n        </Segment>\n    )\n}\n\nfunction extract (string) {\n    if (!string) {\n        return;\n    }\n    const matches = string.match(/\\bhttps?:\\/\\/\\S+/gi);\n    console.log(matches);\n    if (!matches) {\n        return;\n    }\n    return matches[0];\n}\n\nfunction check (fields) {\n    const found = fields.map(extract).filter(v => v)\n    return found.length > 0 && found[0]\n}\n\nexport default Share","import React, { Component } from 'react';\nimport './App.css';\nimport Marks from \"./Marks\";\nimport Share from './Share'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    databaseURL: process.env.REACT_APP_DB_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n}\n\nfirebase.initializeApp(config)\nconst db = firebase.firestore()\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Pookmark\n          <button>+</button>\n        </header>\n        <main>\n          <Share db={db} />\n          <Marks db={db} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\n"],"sourceRoot":""}